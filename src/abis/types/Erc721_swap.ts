/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace BounceFixedSwapNFT {
  export type OrderStruct = {
    token: string;
    tokenId: BigNumberish;
    wantToken: string;
    wantAmount: BigNumberish;
    seller: string;
    buyer: string;
    orderStatus: BigNumberish;
  };

  export type OrderStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    number
  ] & {
    token: string;
    tokenId: BigNumber;
    wantToken: string;
    wantAmount: BigNumber;
    seller: string;
    buyer: string;
    orderStatus: number;
  };
}

export interface Erc721_swapInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "fullfil(uint256,uint256,bytes)": FunctionFragment;
    "initialize()": FunctionFragment;
    "list(address,uint256,address,uint256)": FunctionFragment;
    "numListed(address,address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "signer()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unList(uint256)": FunctionFragment;
    "updatePayment(uint256,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "changeAdmin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "acceptOwnership"
      | "fullfil"
      | "initialize"
      | "list"
      | "numListed"
      | "onERC721Received"
      | "orders"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "setSigner"
      | "signer"
      | "transferOwnership"
      | "unList"
      | "updatePayment"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fullfil",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numListed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePayment",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fullfil", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numListed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePayment",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Fullfiled(uint256,(address,uint256,address,uint256,address,address,uint8),address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Listed(uint256,(address,uint256,address,uint256,address,address,uint8),address,address,uint256)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceUpdated(uint256,address,uint256,address,address,uint256)": EventFragment;
    "UnListed(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fullfiled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Listed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnListed"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface FullfiledEventObject {
  orderId: BigNumber;
  order: BounceFixedSwapNFT.OrderStructOutput;
  txFrom: string;
  txTo: string;
  txTs: BigNumber;
}
export type FullfiledEvent = TypedEvent<
  [BigNumber, BounceFixedSwapNFT.OrderStructOutput, string, string, BigNumber],
  FullfiledEventObject
>;

export type FullfiledEventFilter = TypedEventFilter<FullfiledEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ListedEventObject {
  orderId: BigNumber;
  order: BounceFixedSwapNFT.OrderStructOutput;
  txFrom: string;
  txTo: string;
  txTs: BigNumber;
}
export type ListedEvent = TypedEvent<
  [BigNumber, BounceFixedSwapNFT.OrderStructOutput, string, string, BigNumber],
  ListedEventObject
>;

export type ListedEventFilter = TypedEventFilter<ListedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceUpdatedEventObject {
  orderId: BigNumber;
  wantToken: string;
  wantAmount: BigNumber;
  txFrom: string;
  txTo: string;
  txTs: BigNumber;
}
export type PriceUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface UnListedEventObject {
  orderId: BigNumber;
  txFrom: string;
  txTo: string;
  txTs: BigNumber;
}
export type UnListedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  UnListedEventObject
>;

export type UnListedEventFilter = TypedEventFilter<UnListedEvent>;

export interface Erc721_swap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Erc721_swapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    implementation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fullfil(
      _orderId: BigNumberish,
      _expiredAt: BigNumberish,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    list(
      _token: string,
      _tokenId: BigNumberish,
      _wantToken: string,
      _wantAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    numListed(
      _seller: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, string, string, number] & {
        token: string;
        tokenId: BigNumber;
        wantToken: string;
        wantAmount: BigNumber;
        seller: string;
        buyer: string;
        orderStatus: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unList(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePayment(
      _orderId: BigNumberish,
      _wantToken: string,
      _wantAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  admin(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  implementation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fullfil(
    _orderId: BigNumberish,
    _expiredAt: BigNumberish,
    _signature: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  list(
    _token: string,
    _tokenId: BigNumberish,
    _wantToken: string,
    _wantAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  numListed(
    _seller: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  orders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, string, string, number] & {
      token: string;
      tokenId: BigNumber;
      wantToken: string;
      wantAmount: BigNumber;
      seller: string;
      buyer: string;
      orderStatus: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSigner(
    _signer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unList(
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePayment(
    _orderId: BigNumberish,
    _wantToken: string,
    _wantAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    fullfil(
      _orderId: BigNumberish,
      _expiredAt: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    list(
      _token: string,
      _tokenId: BigNumberish,
      _wantToken: string,
      _wantAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numListed(
      _seller: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, string, string, number] & {
        token: string;
        tokenId: BigNumber;
        wantToken: string;
        wantAmount: BigNumber;
        seller: string;
        buyer: string;
        orderStatus: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unList(_orderId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updatePayment(
      _orderId: BigNumberish,
      _wantToken: string,
      _wantAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Fullfiled(uint256,(address,uint256,address,uint256,address,address,uint8),address,address,uint256)"(
      orderId?: BigNumberish | null,
      order?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): FullfiledEventFilter;
    Fullfiled(
      orderId?: BigNumberish | null,
      order?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): FullfiledEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Listed(uint256,(address,uint256,address,uint256,address,address,uint8),address,address,uint256)"(
      orderId?: BigNumberish | null,
      order?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): ListedEventFilter;
    Listed(
      orderId?: BigNumberish | null,
      order?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): ListedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PriceUpdated(uint256,address,uint256,address,address,uint256)"(
      orderId?: BigNumberish | null,
      wantToken?: null,
      wantAmount?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      orderId?: BigNumberish | null,
      wantToken?: null,
      wantAmount?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): PriceUpdatedEventFilter;

    "UnListed(uint256,address,address,uint256)"(
      orderId?: BigNumberish | null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): UnListedEventFilter;
    UnListed(
      orderId?: BigNumberish | null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): UnListedEventFilter;
  };

  estimateGas: {
    admin(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    implementation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fullfil(
      _orderId: BigNumberish,
      _expiredAt: BigNumberish,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    list(
      _token: string,
      _tokenId: BigNumberish,
      _wantToken: string,
      _wantAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    numListed(
      _seller: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unList(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePayment(
      _orderId: BigNumberish,
      _wantToken: string,
      _wantAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    implementation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fullfil(
      _orderId: BigNumberish,
      _expiredAt: BigNumberish,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    list(
      _token: string,
      _tokenId: BigNumberish,
      _wantToken: string,
      _wantAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    numListed(
      _seller: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unList(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePayment(
      _orderId: BigNumberish,
      _wantToken: string,
      _wantAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
