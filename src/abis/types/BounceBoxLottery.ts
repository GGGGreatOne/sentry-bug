/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BounceBoxLotteryInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "bet()": FunctionFragment;
    "boxFactory()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "drawer()": FunctionFragment;
    "initialize(address,uint256,uint256,address,uint256)": FunctionFragment;
    "interval()": FunctionFragment;
    "isBetted(address)": FunctionFragment;
    "isWon(address)": FunctionFragment;
    "numBetted()": FunctionFragment;
    "numDrawed(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paidWith(address)": FunctionFragment;
    "participants(uint256)": FunctionFragment;
    "payment()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pickWinner(uint256,uint256,bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDrawer(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unBet()": FunctionFragment;
    "winnerOf(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "changeAdmin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "acceptOwnership"
      | "bet"
      | "boxFactory"
      | "currentEpoch"
      | "drawer"
      | "initialize"
      | "interval"
      | "isBetted"
      | "isWon"
      | "numBetted"
      | "numDrawed"
      | "owner"
      | "paidWith"
      | "participants"
      | "payment"
      | "pendingOwner"
      | "pickWinner"
      | "renounceOwnership"
      | "setDrawer"
      | "transferOwnership"
      | "unBet"
      | "winnerOf"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boxFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "drawer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "interval", values?: undefined): string;
  encodeFunctionData(functionFragment: "isBetted", values: [string]): string;
  encodeFunctionData(functionFragment: "isWon", values: [string]): string;
  encodeFunctionData(functionFragment: "numBetted", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numDrawed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paidWith", values: [string]): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "payment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pickWinner",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDrawer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unBet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "winnerOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boxFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBetted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isWon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numBetted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numDrawed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paidWith", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pickWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDrawer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winnerOf", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Betted(address,address,uint256,address,address,uint256)": EventFragment;
    "Drawed(uint256,address,uint256,uint256,address,address,uint256)": EventFragment;
    "DuplicateWinner(uint256,address,address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LotteryParams(address,uint256,uint256,address,uint256,address,address,uint256)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UnBetted(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Betted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Drawed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DuplicateWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnBetted"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface BettedEventObject {
  account: string;
  token: string;
  amount: BigNumber;
  txFrom: string;
  txTo: string;
  txTs: BigNumber;
}
export type BettedEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  BettedEventObject
>;

export type BettedEventFilter = TypedEventFilter<BettedEvent>;

export interface DrawedEventObject {
  epoch: BigNumber;
  winner: string;
  clubId: BigNumber;
  betteds: BigNumber;
  txFrom: string;
  txTo: string;
  txTs: BigNumber;
}
export type DrawedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string, string, BigNumber],
  DrawedEventObject
>;

export type DrawedEventFilter = TypedEventFilter<DrawedEvent>;

export interface DuplicateWinnerEventObject {
  epoch: BigNumber;
  duplicater: string;
  txFrom: string;
  txTo: string;
  txTs: BigNumber;
}
export type DuplicateWinnerEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  DuplicateWinnerEventObject
>;

export type DuplicateWinnerEventFilter = TypedEventFilter<DuplicateWinnerEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LotteryParamsEventObject {
  drawer: string;
  interval: BigNumber;
  currentEpoch: BigNumber;
  token: string;
  priceInToken: BigNumber;
  txFrom: string;
  txTo: string;
  txTs: BigNumber;
}
export type LotteryParamsEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, string, string, BigNumber],
  LotteryParamsEventObject
>;

export type LotteryParamsEventFilter = TypedEventFilter<LotteryParamsEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UnBettedEventObject {
  account: string;
  txFrom: string;
  txTo: string;
  txTs: BigNumber;
}
export type UnBettedEvent = TypedEvent<
  [string, string, string, BigNumber],
  UnBettedEventObject
>;

export type UnBettedEventFilter = TypedEventFilter<UnBettedEvent>;

export interface BounceBoxLottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BounceBoxLotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    implementation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    bet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    boxFactory(overrides?: CallOverrides): Promise<[string]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    drawer(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _drawer: string,
      _interval: BigNumberish,
      _currentEpoch: BigNumberish,
      _token: string,
      _priceInToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    interval(overrides?: CallOverrides): Promise<[BigNumber]>;

    isBetted(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isWon(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    numBetted(overrides?: CallOverrides): Promise<[BigNumber]>;

    numDrawed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paidWith(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { token: string; priceInToken: BigNumber }
    >;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payment(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { token: string; priceInToken: BigNumber }
    >;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    pickWinner(
      _epoch: BigNumberish,
      _clubId: BigNumberish,
      _seed: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDrawer(
      _drawer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unBet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    winnerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  admin(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  implementation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  bet(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  boxFactory(overrides?: CallOverrides): Promise<string>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  drawer(overrides?: CallOverrides): Promise<string>;

  initialize(
    _drawer: string,
    _interval: BigNumberish,
    _currentEpoch: BigNumberish,
    _token: string,
    _priceInToken: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  interval(overrides?: CallOverrides): Promise<BigNumber>;

  isBetted(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isWon(_account: string, overrides?: CallOverrides): Promise<boolean>;

  numBetted(overrides?: CallOverrides): Promise<BigNumber>;

  numDrawed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paidWith(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; priceInToken: BigNumber }>;

  participants(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payment(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; priceInToken: BigNumber }>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  pickWinner(
    _epoch: BigNumberish,
    _clubId: BigNumberish,
    _seed: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDrawer(
    _drawer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unBet(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  winnerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    bet(overrides?: CallOverrides): Promise<void>;

    boxFactory(overrides?: CallOverrides): Promise<string>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    drawer(overrides?: CallOverrides): Promise<string>;

    initialize(
      _drawer: string,
      _interval: BigNumberish,
      _currentEpoch: BigNumberish,
      _token: string,
      _priceInToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    isBetted(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isWon(_account: string, overrides?: CallOverrides): Promise<boolean>;

    numBetted(overrides?: CallOverrides): Promise<BigNumber>;

    numDrawed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paidWith(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { token: string; priceInToken: BigNumber }
    >;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payment(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { token: string; priceInToken: BigNumber }
    >;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    pickWinner(
      _epoch: BigNumberish,
      _clubId: BigNumberish,
      _seed: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDrawer(_drawer: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unBet(overrides?: CallOverrides): Promise<void>;

    winnerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Betted(address,address,uint256,address,address,uint256)"(
      account?: null,
      token?: null,
      amount?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): BettedEventFilter;
    Betted(
      account?: null,
      token?: null,
      amount?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): BettedEventFilter;

    "Drawed(uint256,address,uint256,uint256,address,address,uint256)"(
      epoch?: null,
      winner?: null,
      clubId?: null,
      betteds?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): DrawedEventFilter;
    Drawed(
      epoch?: null,
      winner?: null,
      clubId?: null,
      betteds?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): DrawedEventFilter;

    "DuplicateWinner(uint256,address,address,address,uint256)"(
      epoch?: null,
      duplicater?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): DuplicateWinnerEventFilter;
    DuplicateWinner(
      epoch?: null,
      duplicater?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): DuplicateWinnerEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LotteryParams(address,uint256,uint256,address,uint256,address,address,uint256)"(
      drawer?: null,
      interval?: null,
      currentEpoch?: null,
      token?: null,
      priceInToken?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): LotteryParamsEventFilter;
    LotteryParams(
      drawer?: null,
      interval?: null,
      currentEpoch?: null,
      token?: null,
      priceInToken?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): LotteryParamsEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UnBetted(address,address,address,uint256)"(
      account?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): UnBettedEventFilter;
    UnBetted(
      account?: null,
      txFrom?: null,
      txTo?: null,
      txTs?: null
    ): UnBettedEventFilter;
  };

  estimateGas: {
    admin(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    implementation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    bet(overrides?: PayableOverrides & { from?: string }): Promise<BigNumber>;

    boxFactory(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    drawer(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _drawer: string,
      _interval: BigNumberish,
      _currentEpoch: BigNumberish,
      _token: string,
      _priceInToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    isBetted(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isWon(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    numBetted(overrides?: CallOverrides): Promise<BigNumber>;

    numDrawed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paidWith(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payment(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pickWinner(
      _epoch: BigNumberish,
      _clubId: BigNumberish,
      _seed: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDrawer(
      _drawer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unBet(overrides?: PayableOverrides & { from?: string }): Promise<BigNumber>;

    winnerOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    implementation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    bet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    boxFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _drawer: string,
      _interval: BigNumberish,
      _currentEpoch: BigNumberish,
      _token: string,
      _priceInToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    interval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBetted(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWon(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numBetted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numDrawed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paidWith(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participants(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pickWinner(
      _epoch: BigNumberish,
      _clubId: BigNumberish,
      _seed: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDrawer(
      _drawer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unBet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    winnerOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
