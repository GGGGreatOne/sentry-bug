import { Stack, CircularProgress, Backdrop, Box, styled, Typography } from '@mui/material'
import { useCallback, useEffect, useMemo, useState } from 'react'
import {
  useEditBoxInfo,
  useBoxEditStatus,
  useGetPluginList,
  useGetBoxDraftInfo,
  useEditBoxBasicInfo
} from 'state/boxes/hooks'
import BoxTab from 'views/editBox/components/BoxTab'
import BoxInfo from 'views/editBox/components/BoxInfo'
import { useRouter } from 'next/router'
import { IBoxUserStatus } from 'api/user/type'
import Updater from 'state/boxes/updater'
import { useUserInfo } from 'state/user/hooks'
import BoxMain from 'views/editBox/components/BoxMain'
import useGetBoxAddress from 'hooks/boxes/useGetBoxAddress'
import { ZERO_ADDRESS } from '../../../constants'
import { IBoxBasicAnotherInfoValue } from 'state/boxes/type'
import useBreakpoint from 'hooks/useBreakpoint'
import Head from 'next/head'
import { viewControl } from 'views/editBox/modal'
import ClubPortfolio from 'views/editBox/components/clubPortfolio'
import { useGetBoxInfo } from '../../../hooks/boxes/useGetBoxInfo'
import QuickTour from 'components/QuickTour'

export default function Page() {
  const [refresh, setRefresh] = useState<number>(-1)
  const boxData = useEditBoxInfo()
  const { updateBoxIsTourCallback } = useEditBoxBasicInfo()
  const isMd = useBreakpoint('md')
  const userInfo = useUserInfo()
  const router = useRouter()
  const appId = useMemo(() => (router.query.appId ? router.query.appId.toString() : undefined), [router.query.appId])
  const [changeNum, setChangeNum] = useState(0)
  const { data: _data } = useGetBoxInfo(boxData.boxBasicInfo.boxId.toString(), changeNum)
  const anotherInfo: IBoxBasicAnotherInfoValue = useMemo(() => {
    return {
      tvl: userInfo.box?.tvl,
      rank: userInfo.box?.ranks,
      followCount: userInfo.follow?.followers
    }
  }, [userInfo.box?.ranks, userInfo.box?.tvl, userInfo.follow?.followers])
  const { data: draftInfo } = useGetBoxDraftInfo(boxData.boxBasicInfo.boxId, refresh)
  const { boxAddressRaw } = useGetBoxAddress(userInfo.box?.rewardId || undefined)
  const { data: enablePluginList } = useGetPluginList(boxData.boxBasicInfo.boxId?.toString(), changeNum, refresh)

  const onRefresh = useCallback(() => {
    const timer = setTimeout(() => {
      setRefresh(Math.random())
    }, 1000)

    return () => {
      clearTimeout(timer)
    }
  }, [])

  const redirectHome = useCallback(() => {
    // const goHome = () => {
    // router.push('/')
    // }
    if (
      (userInfo.user &&
        typeof userInfo.user.boxStatus === 'number' &&
        userInfo.user.boxStatus < IBoxUserStatus.CREATED) ||
      boxAddressRaw === ZERO_ADDRESS
    ) {
      router.push('/')
      return
    }
  }, [boxAddressRaw, router, userInfo.user])

  useEffect(() => {
    redirectHome()
  }, [redirectHome])

  useEffect(() => {
    if (!userInfo.token) {
      router.push('/')
    }
  }, [router, userInfo.token])

  const { editing } = useBoxEditStatus()
  const handleTabIntoView = () => {
    const section = document.getElementById('stakePanel')
    if (section) {
      const offsetTop = section.offsetTop
      setTimeout(() => {
        window.scrollTo({ top: offsetTop - 50, behavior: 'smooth' })
      }, 100)
    }
  }

  const steps = [
    {
      target: '.project-step',
      title: 'Edit Basic Club Information',
      content:
        'First, add your personal touch by filling in the basic information. Once you’ve finished editing, you can preview the changes before applying them.',
      disableBeacon: true,
      floaterProps: {
        styles: {
          arrow: {
            color: '#FF9314'
          }
        }
      }
    },
    {
      target: '.project-step2',
      title: 'Set Club Access',
      content: `As a club owner, you can control who can access your club by setting it to one of the 3 modes: Free access for all, Pay to access, and Whitelist modes. Please note that your chosen access mode is permanent and cannot be changed once set.`,
      floaterProps: {
        styles: {
          arrow: {
            color: isMd ? '#7270FF' : '#FF9314'
          }
        }
      }
    },
    {
      target: '.project-step3',
      title: 'Track & Manage Your Club',
      content: (
        <Stack flexDirection={'column'} gap={16}>
          <ContentBox>Club Portfolio is designed for you to monitor all key metrics.</ContentBox>
          <ContentBox>On the Main Dashboard, you’ll find: </ContentBox>
          <ContentBox>
            • Club Assets: View the current total value of all assets and specific distribution of assets across the
            DApps within your club;
          </ContentBox>
          <ContentBox>
            • Club Token List: See the types and amounts of tokens generated by the Token Minter and/or DApps within
            your club;
          </ContentBox>
          <ContentBox>
            • Fees & Rewards: Track your club’s total revenue and the rewards distributed to members.
          </ContentBox>
        </Stack>
      ),
      floaterProps: {
        styles: {
          arrow: {
            color: '#FF9314'
          }
        }
      }
    },
    {
      target: '.project-step4',
      title: 'Manage Tokens with Token ToolBox',
      content: `Token ToolBox offers a suite of token management tools, allowing you to mint, distribute and lock tokens based on your specific needs.`,
      floaterProps: {
        styles: {
          arrow: {
            color: '#FF9314'
          }
        }
      }
    },
    // {
    //   target: '.project-step5',
    //   title: 'Whitelist Management',
    //   content: `Our Whitelist management feature provides the ability to both view and create Whitelists at any time. It is a tool that can aid in organizing and managing Campaign or Proof of Contribution Whitelists.`,
    //   floaterProps: {
    //     styles: {
    //       arrow: {
    //         color: isMd ? '#7270FF' : '#FF9314'
    //       }
    //     }
    //   }
    // },
    {
      target: '.project-step5',
      title: 'Easily Add Apps to Your Club',
      content: `As a Club owner, you can add as many Apps as you want to your Club by clicking “+Add An App” and selecting your favorite Apps.`,
      floaterProps: {
        styles: {
          arrow: {
            color: '#FF9314'
          }
        }
      }
    },
    // {
    //   target: '.project-step8',
    //   title: 'Add An App',
    //   content: `You can also explore all apps from the extensive selection available on the App Store. `,
    //   offset: isMd ? 10 : 40,
    //   floaterProps: {
    //     styles: {
    //       arrow: {
    //         color: '#FF9314'
    //       }
    //     }
    //   }
    // },
    {
      target: '.project-step6',
      title: 'Finalize and Submit Your Club',
      content: 'Finalize the setup of your Club and submit it. Congratulations, you just created your own Club!',
      offset: isMd ? 10 : 40,
      floaterProps: {
        styles: {
          arrow: {
            color: isMd ? '#FF2626' : '#FF9314'
          }
        }
      }
    }
  ]
  const [run, setRun] = useState(false)
  useEffect(() => {
    if (boxData.boxBasicInfo.isTour && userInfo.box?.boxAddress) {
      setRun(false)
      viewControl.show('GuidanceModal', { setIsOpen: setRun, handleSkip: updateBoxIsTourCallback })
    }
  }, [boxData.boxBasicInfo, boxData.boxBasicInfo.isTour, updateBoxIsTourCallback, userInfo.box?.boxAddress])
  return (
    <Stack
      sx={{
        minHeight: `calc(100vh - 70px - 128px )`
      }}
      direction={'column'}
    >
      <Head>
        <title>BounceClub - Edit Club</title>
      </Head>
      <Updater selfBoxId={userInfo.user?.boxId || undefined} changeNum={changeNum} />
      <Backdrop
        sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }}
        open={boxData.boxBasicInfo.boxId === ''}
      >
        <CircularProgress color="inherit" />
      </Backdrop>
      {/* {editing && <BoxMain boxBasicInfo={boxData.boxBasicInfo} editing={editing} maxWidth={'100%'} />} */}
      <QuickTour run={run} steps={steps} setRun={setRun} showStart handleSkip={updateBoxIsTourCallback} />
      <BoxMain
        draftInfo={draftInfo}
        boxBasicInfo={boxData.boxBasicInfo}
        editing={editing}
        clubInfo={enablePluginList?.listingInfo || _data}
        isListing={!!enablePluginList?.listingStatus}
        isPublish={!!_data?.publishStatus}
        boxType={userInfo.box?.boxType}
        onRefresh={onRefresh}
      />
      {/* <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <BoxMain boxBasicInfo={boxData.boxBasicInfo} editing={editing} />
      </Box> */}
      <BoxInfo
        draftInfo={draftInfo}
        isVerified={_data?.verified}
        club={enablePluginList?.listingInfo}
        isListing={!!enablePluginList?.listingStatus}
        boxBasicInfo={boxData.boxBasicInfo}
        rewardId={userInfo.box?.rewardId}
        anotherInfo={anotherInfo}
        isFollow={false}
        isShowCus={false}
        setRun={setRun}
        onSubmit={() => {
          setChangeNum(changeNum + 1)
        }}
        onRefresh={onRefresh}
      />
      {userInfo.box?.boxAddress && (
        <ClubPortfolio
          feeAndReward={{
            fee: boxData.fee || enablePluginList?.fee || '0'
          }}
          followers={anotherInfo.followCount}
          draftInfo={draftInfo}
          boxAddress={userInfo.box.boxAddress}
          editing={editing}
          isListing={!!enablePluginList?.listingStatus}
        />
      )}
      <Box id={'stakePanel'} width={'100%'}></Box>
      {userInfo.box?.boxAddress && enablePluginList?.pluginList && (
        <BoxTab
          boxData={boxData}
          draftInfo={draftInfo}
          appId={appId}
          editing={editing}
          boxAddress={userInfo.box.boxAddress}
          handleTabIntoView={handleTabIntoView}
          enablePluginList={enablePluginList.pluginList}
          roomId={_data?.roomId}
          onSubmit={() => {
            setChangeNum(changeNum + 1)
          }}
          boxType={userInfo.box?.boxType}
        />
      )}
    </Stack>
  )
}

const ContentBox = styled(Typography)(({ theme }) => ({
  fontWeight: 400,
  color: 'var(--ps-text-80)',
  lineHeight: '18.2px',
  fontSize: 13,
  [theme.breakpoints.down('md')]: {
    fontSize: 12,
    lineHeight: '16.8px'
  }
}))
